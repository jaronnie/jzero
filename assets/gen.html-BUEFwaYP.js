import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c,a as d,w as n,e,b as p,d as a}from"./app-CVYHoIVN.js";const m={},h=e("p",null,"jzero gen 根据 daemon/api 和 daemon/proto 文件生成代码. 生成代码的逻辑是调用 goctl 工具完成.",-1),u=e("p",null,"jzero 会自动检测对应文件夹下的内容, 然后进行自动生成, 使用者无需关心.",-1),v=e("h2",{id:"生成代码",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#生成代码"},[e("span",null,"生成代码")])],-1),g=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"jzero version >= v0.7.4 可使用 Docker 生成代码")],-1),b=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"cd"),a(` app1
jzero gen
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),_=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"docker"),a(" run "),e("span",{class:"token parameter variable"},"--rm"),a(),e("span",{class:"token punctuation"},"\\"),a(`
  `),e("span",{class:"token parameter variable"},"-v"),a(" ./app1:/app/app1 jaronnie/jzero:latest "),e("span",{class:"token punctuation"},"\\"),a(`
  gen `),e("span",{class:"token parameter variable"},"-w"),a(` app1
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),k=p(`<h2 id="下载依赖" tabindex="-1"><a class="header-anchor" href="#下载依赖"><span>下载依赖</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go mod tidy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="运行项目" tabindex="-1"><a class="header-anchor" href="#运行项目"><span>运行项目</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run main.go daemon <span class="token parameter variable">--config</span> config.toml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="测试接口" tabindex="-1"><a class="header-anchor" href="#测试接口"><span>测试接口</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># gateway</span>
<span class="token function">curl</span> http://localhost:8001/api/v1.0/credential/version
<span class="token comment"># grpc</span>
grpcurl <span class="token parameter variable">-plaintext</span> localhost:8000 credentialpb.credential/CredentialVersion
<span class="token comment"># api</span>
<span class="token function">curl</span> http://localhost:8001/api/v1/hello/me
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function j(f,z){const i=l("CodeTabs");return r(),c("div",null,[h,u,v,g,d(i,{id:"11",data:[{id:"jzero"},{id:"Docker"}],"tab-id":"shell"},{title0:n(({value:t,isActive:s})=>[a("jzero")]),title1:n(({value:t,isActive:s})=>[a("Docker")]),tab0:n(({value:t,isActive:s})=>[b]),tab1:n(({value:t,isActive:s})=>[_]),_:1}),k])}const T=o(m,[["render",j],["__file","gen.html.vue"]]),C=JSON.parse('{"path":"/guide/gen.html","title":"生成代码","lang":"zh-CN","frontmatter":{"title":"生成代码","icon":"code","order":4,"description":"jzero gen 根据 daemon/api 和 daemon/proto 文件生成代码. 生成代码的逻辑是调用 goctl 工具完成. jzero 会自动检测对应文件夹下的内容, 然后进行自动生成, 使用者无需关心. 生成代码 jzero version >= v0.7.4 可使用 Docker 生成代码 下载依赖 运行项目 测试接口","head":[["meta",{"property":"og:url","content":"https://jaronnie.github.io/jzero/guide/gen.html"}],["meta",{"property":"og:site_name","content":"Jzero Framework"}],["meta",{"property":"og:title","content":"生成代码"}],["meta",{"property":"og:description","content":"jzero gen 根据 daemon/api 和 daemon/proto 文件生成代码. 生成代码的逻辑是调用 goctl 工具完成. jzero 会自动检测对应文件夹下的内容, 然后进行自动生成, 使用者无需关心. 生成代码 jzero version >= v0.7.4 可使用 Docker 生成代码 下载依赖 运行项目 测试接口"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T03:05:00.000Z"}],["meta",{"property":"article:author","content":"jaronnie"}],["meta",{"property":"article:modified_time","content":"2024-04-18T03:05:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生成代码\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-18T03:05:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"jaronnie\\",\\"url\\":\\"https://github.com/jaronnie\\"}]}"]]},"headers":[{"level":2,"title":"生成代码","slug":"生成代码","link":"#生成代码","children":[]},{"level":2,"title":"下载依赖","slug":"下载依赖","link":"#下载依赖","children":[]},{"level":2,"title":"运行项目","slug":"运行项目","link":"#运行项目","children":[]},{"level":2,"title":"测试接口","slug":"测试接口","link":"#测试接口","children":[]}],"git":{"createdTime":1713163888000,"updatedTime":1713409500000,"contributors":[{"name":"jaronnie","email":"jaron@jaronnie.com","commits":4}]},"readingTime":{"minutes":0.5,"words":150},"filePathRelative":"guide/gen.md","localizedDate":"2024年4月15日","autoDesc":true}');export{T as comp,C as data};
